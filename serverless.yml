# NOTE: update this with your service name
service: notes-app-api

# Create an optimized package for our functions 
package:
  #Creates lambda per function
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-notes
  webpack:
      webpackConfig: 'webpack.config.js'
      packager: 'npm'
      includeModules: true
  dotenv:
      # Without this, the serverless-dot-env-plugin will add all the environment variables
      # This means variables will be added twice. Once by the plugin and the other
      # by the "environment" section below
      include:
        -

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-2
  profile: rv

  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]

functions:
  - ${file(function-defs/create-func.yml)}
  - ${file(function-defs/get-func.yml)}
  - ${file(function-defs/list-func.yml)}
  - ${file(function-defs/update-func.yml)}
  - ${file(function-defs/delete-func.yml)}
  - ${file(function-defs/billing-func.yml)}

resources:
  # API Gateway Errors
  #- ${file(aws-resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(aws-resources/dynamodb.yml)}
  # S3
  - ${file(aws-resources/s3-bucket.yml)}
  # Cognito
  - ${file(aws-resources/cognito-user-pool.yml)}
  - ${file(aws-resources/cognito-identity-pool.yml)}
  # API Gateway
  - ${file(aws-resources/api-gateway-errors.yml)}


